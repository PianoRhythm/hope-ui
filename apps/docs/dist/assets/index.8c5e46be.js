import{o as b,c as e,d as i,C as s,U as S,N as a,h as f,bh as t,H as $,bi as x,bj as C,t as r,q as P}from"./index.7fce6435.js";import{C as T}from"./CodeSnippet.08181d9e.js";import{P as w,a as y}from"./PageTitle.ae31f383.js";import{P as l}from"./Preview.57b819a9.js";import{P as p}from"./PropsTable.7a791e85.js";import{S as n}from"./SectionSubtitle.86e40de8.js";import{S as d}from"./SectionTitle.028d68a7.js";import"./Footer.0b307416.js";const v='import { Skeleton, SkeletonCircle, SkeletonText } from "@hope-ui/solid"',U=`<VStack alignItems="stretch" spacing="$2">
  <Skeleton height="20px" />
  <Skeleton height="20px" />
  <Skeleton height="20px" />
</VStack>`,I=`<Skeleton>
  <div>contents wrapped</div>
  <div>won't be visible</div>
</Skeleton>`,L=`<Box p="$6" boxShadow="$lg" rounded="$sm" bg="$loContrast">
  <SkeletonCircle size="$10" />
  <SkeletonText mt="$4" noOfLines={4} spacing="$4" />
</Box>`,V='<Skeleton startColor="tomato" endColor="orange" height="20px" />',z=`<Skeleton loaded>
  <span>Hope UI is cool</span>
</Skeleton>`,o={importComponent:v,basicUsageStandalone:U,basicUsageWrapper:I,circleAndText:L,color:V,skipping:z};var A=r("<strong>Skeleton:"),_=r("<strong>SkeletonCircle:"),O=r("<strong>SkeletonText:"),D=r("<div>contents wrapped"),H=r("<div>won't be visible"),B=r("<span>Hope UI is cool");function E(){const c={href:"/docs/feedback/progress",label:"Progress"},h={href:"/docs/feedback/spinner",label:"Spinner"},m=[{href:"#import",label:"Import"},{href:"#usage",label:"Usage"},{href:"#circle-and-text",label:"Circle and text Skeleton",indent:!0},{href:"#color",label:"Skeleton color",indent:!0},{href:"#skip-when-content-is-loaded",label:"Skipping the skeleton when content is loaded",indent:!0},{href:"#props",label:"Props"},{href:"#skeleton-props",label:"Skeleton props",indent:!0},{href:"#skeleton-circle-props",label:"SkeletonCircle props",indent:!0},{href:"#skeleton-text-props",label:"SkeletonText props",indent:!0}],g=[{name:"startColor",description:"The color at the animation start.",type:'ColorProps["backgroundColor"]'},{name:"endColor",description:"The color at the animation end.",type:'ColorProps["backgroundColor"]'},{name:"loaded",description:"If `true`, it'll render its children with a nice fade animation.",type:"boolean"},{name:"speed",description:"The animation speed in CSS unit.",type:"Property.AnimationDuration",defaultValue:"800ms"},{name:"fadeDuration",description:"The loaded children fadeIn animation duration in CSS unit.",type:"Property.AnimationDuration",defaultValue:"400ms"}],u=[{name:"size",description:"The size of the circle.",type:'SizeProps["boxSize"]',defaultValue:"2rem"}],k=[{name:"noOfLines",description:"The number of skeleton text lines.",type:"number",defaultValue:"3"},{name:"spacing",description:"The space between each skeleton text line.",type:'GridLayoutProps["gap"]',defaultValue:"0.5rem"},{name:"skeletonHeight",description:"The height of each skeleton text line.",type:'SizeProps["height"]',defaultValue:"0.5rem"}];return b(()=>{P.highlightAll()}),e(y,{previousLink:c,nextLink:h,contextualNavLinks:m,get children(){return[e(w,{children:"Skeleton"}),e(i,{mb:"$5",get children(){return[e(s,{children:"Skeleton"})," is used to display the loading state of some components."]}}),e(d,{id:"import",children:"Import"}),e(T,{get snippet(){return o.importComponent},mb:"$6"}),e(S,{spacing:"$2",mb:"$12",get children(){return[e(a,{get children(){return[A()," The base component that show the loading state."]}}),e(a,{get children(){return[_()," A circular skeleton."]}}),e(a,{get children(){return[O()," A skeleton that represents one or more lines of text."]}})]}}),e(d,{id:"usage",children:"Usage"}),e(i,{mb:"$5",children:"You can use it as a standalone component."}),e(l,{get snippet(){return o.basicUsageStandalone},mb:"$8",get children(){return e(f,{alignItems:"stretch",spacing:"$2",get children(){return[e(t,{height:"20px"}),e(t,{height:"20px"}),e(t,{height:"20px"})]}})}}),e(i,{mb:"$5",children:"Or to wrap another component to take the same height and width."}),e(l,{get snippet(){return o.basicUsageWrapper},mb:"$10",get children(){return e(t,{get children(){return[D(),H()]}})}}),e(n,{id:"circle-and-text",children:"Circle and text Skeleton"}),e(l,{get snippet(){return o.circleAndText},mb:"$10",get children(){return e($,{p:"$6",boxShadow:"$lg",rounded:"$sm",bg:"$loContrast",get children(){return[e(x,{size:"$10"}),e(C,{mt:"$4",noOfLines:4,spacing:"$4"})]}})}}),e(n,{id:"color",children:"Skeleton color"}),e(i,{mb:"$5",get children(){return["Use the ",e(s,{children:"startColor"})," and ",e(s,{children:"endColor"})," props to change the animation color."]}}),e(l,{get snippet(){return o.color},mb:"$10",get children(){return e(t,{startColor:"tomato",endColor:"orange",height:"20px"})}}),e(n,{id:"skip-when-content-is-loaded",children:"Skipping the skeleton when content is loaded"}),e(i,{mb:"$5",get children(){return["Use the ",e(s,{children:"loaded"})," prop to prevent the skeleton from rendering."]}}),e(l,{get snippet(){return o.skipping},mb:"$12",get children(){return e(t,{loaded:!0,get children(){return B()}})}}),e(d,{id:"props",children:"Props"}),e(n,{id:"skeleton-props",children:"Skeleton props"}),e(p,{items:g,mb:"$10"}),e(n,{id:"skeleton-circle-props",children:"SkeletonCircle props"}),e(p,{items:u,mb:"$10"}),e(n,{id:"skeleton-text-props",children:"SkeletonText props"}),e(p,{items:k})]}})}export{E as default};
