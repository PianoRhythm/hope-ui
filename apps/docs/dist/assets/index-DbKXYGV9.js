import{o as f,c as e,i as s,C as r,J as p,Q as l,t as u,bc as o,bd as n,be as $,p as v}from"./index-Nxbfex4q.js";import{C as d}from"./CodeSnippet-BKIkSwFL.js";import{P as y,a as k}from"./PageTitle-D0rjqxl5.js";import{P as a}from"./Preview-Dv-XfG_3.js";import{P as h}from"./PropsTable-b7KBJ81X.js";import{S as i}from"./SectionSubtitle-BnAf6Y1E.js";import{S as c}from"./SectionTitle-D4b_6ZYs.js";import"./Footer-DCmuVtpk.js";const w=`import { 
  CircularProgress, 
  CircularProgressIndicator,
  CircularProgressLabel 
} from "@hope-ui/solid"`,I=`<CircularProgress value={80}>
  <CircularProgressIndicator />
</CircularProgress>`,T=`<CircularProgress trackColor="$info3" value={64}>
  <CircularProgressIndicator color="$info9" />
</CircularProgress>`,S=`<CircularProgress value={30} size="120px">
  <CircularProgressIndicator />
</CircularProgress>`,x=`<CircularProgress value={59} size="100px" thickness="4px">
  <CircularProgressIndicator />
</CircularProgress>`,z=`<CircularProgress value={80}>
  <CircularProgressIndicator withRoundCaps />
</CircularProgress>`,L=`<CircularProgress value={40}>
  <CircularProgressIndicator color="$success9" />
  <CircularProgressLabel />
</CircularProgress>`,U=`<CircularProgress indeterminate>
  <CircularProgressIndicator color="$success9" />
</CircularProgress>`,V=`const config: HopeThemeConfig = {
  components: {
    CircularProgress: {
      baseStyle: {
        root: SystemStyleObject,
        track: SystemStyleObject,
        indicator: SystemStyleObject,
        label: SystemStyleObject
      },
      defaultProps: {
        root: ThemeableCircularProgressOptions
      }
    }
  }
}`,t={importComponent:w,basicUsage:I,color:T,size:S,thickness:x,withRoundCaps:z,withLabel:L,indeterminate:U,theming:V};var R=u("<strong>CircularProgress:"),j=u("<strong>CircularProgressIndicator:"),A=u("<strong>CircularProgressLabel:");function M(){const g={href:"/docs/feedback/alert",label:"Alert"},m={href:"/docs/feedback/progress",label:"Progress"},b=[{href:"#import",label:"Import"},{href:"#usage",label:"Usage"},{href:"#color",label:"CircularProgress color",indent:!0},{href:"#size",label:"CircularProgress size",indent:!0},{href:"#thickness",label:"CircularProgress thickness",indent:!0},{href:"#with-round-cap",label:"CircularProgress with round cap",indent:!0},{href:"#with-label",label:"CircularProgress with label",indent:!0},{href:"#indeterminate",label:"Indeterminate progress",indent:!0},{href:"#accessibility",label:"Accessibility"},{href:"#theming",label:"Theming"},{href:"#props",label:"Props"},{href:"#circular-progress-props",label:"CircularProgress props",indent:!0},{href:"#circular-progress-indicator-props",label:"CircularProgressIndicator props",indent:!0}],C=[{name:"trackColor",description:"The color of the progress track.",type:'ColorProps["color"]',defaultValue:"$neutral4"},{name:"size",description:"The size of the progress.",type:'SizeProps["boxSize"]',defaultValue:"$12"},{name:"thickness",description:"The thickness of the progress.",type:"Property.StrokeWidth<SizeScaleValue> | number",defaultValue:"$2_5"},{name:"value",description:"The `value` of the progress indicator.",type:"number"},{name:"indeterminate",description:"If `true`, the progress will be indeterminate and the `value` prop will be ignored.",type:"boolean"},{name:"min",description:"The minimum value of the progress.",type:"number",defaultValue:"0"},{name:"max",description:"The maximum value of the progress.",type:"number",defaultValue:"100"},{name:"valueText",description:"The desired `aria-valuetext` to use in place of the value.",type:"string"},{name:"getValueText",description:"A function that returns the desired `aria-valuetext` to use in place of the value.",type:"(value: number, percent: number) => string"}],P=[{name:"color",description:"The color of the progress indicator.",type:'ColorProps["color"]',defaultValue:"$primary9"},{name:"withRoundCaps",description:"If `true`, the caps of the progress indicator will be rounded.",type:"boolean",defaultValue:"false"}];return f(()=>{v.highlightAll()}),e(k,{previousLink:g,nextLink:m,contextualNavLinks:b,get children(){return[e(y,{children:"CircularProgress"}),e(s,{mb:"$5",get children(){return["The ",e(r,{children:"CircularProgress"})," component is used to indicate the progress for determinate and indeterminate processes."]}}),e(c,{id:"import",children:"Import"}),e(d,{get snippet(){return t.importComponent},mb:"$6"}),e(p,{spacing:"$2",mb:"$12",get children(){return[e(l,{get children(){return[R()," The wrapper that provides context for its children."]}}),e(l,{get children(){return[j()," The visual indicator of the progress."]}}),e(l,{get children(){return[A()," The textual representation of the progress."]}})]}}),e(c,{id:"usage",children:"Usage"}),e(a,{get snippet(){return t.basicUsage},mb:"$10",get children(){return e(o,{value:80,get children(){return e(n,{})}})}}),e(i,{id:"color",children:"CircularProgress color"}),e(s,{mb:"$5",get children(){return["Use the ",e(r,{children:"color"})," prop to change the color of the"," ",e(r,{children:"CircularProgressIndicator"})," and the ",e(r,{children:"trackColor"})," prop to change the color of the progress track (background)."]}}),e(a,{get snippet(){return t.color},mb:"$10",get children(){return e(o,{trackColor:"$info3",value:64,get children(){return e(n,{color:"$info9"})}})}}),e(i,{id:"size",children:"CircularProgress size"}),e(s,{mb:"$5",get children(){return["Use the ",e(r,{children:"size"})," prop to change the size of the progress."]}}),e(a,{get snippet(){return t.size},mb:"$10",get children(){return e(o,{value:30,size:"120px",get children(){return e(n,{})}})}}),e(i,{id:"thickness",children:"CircularProgress thickness"}),e(s,{mb:"$5",get children(){return["Use the ",e(r,{children:"thickness"})," prop to change the thickness of the progress."]}}),e(a,{get snippet(){return t.thickness},mb:"$10",get children(){return e(o,{value:59,size:"100px",thickness:"4px",get children(){return e(n,{})}})}}),e(i,{id:"with-round-cap",children:"CircularProgress with round cap"}),e(s,{mb:"$5",get children(){return["Use the ",e(r,{children:"withRoundCaps"})," prop to set the ",e(r,{children:"CircularProgressIndicator"})," ","caps rounded."]}}),e(a,{get snippet(){return t.withRoundCaps},mb:"$10",get children(){return e(o,{value:80,get children(){return e(n,{withRoundCaps:!0})}})}}),e(i,{id:"with-label",children:"CircularProgress with label"}),e(s,{mb:"$5",get children(){return["You can set a label inside the propgress by using the ",e(r,{children:"CircularProgressLabel"})," ","component. By default it will display the progress percentage."]}}),e(a,{get snippet(){return t.withLabel},mb:"$10",get children(){return e(o,{value:40,get children(){return[e(n,{color:"$success9"}),e($,{})]}})}}),e(i,{id:"indeterminate",children:"Indeterminate progress"}),e(s,{mb:"$5",get children(){return["Use the ",e(r,{children:"indeterminate"})," prop to set the progress in an indeterminate state."]}}),e(a,{get snippet(){return t.indeterminate},mb:"$12",get children(){return e(o,{indeterminate:!0,get children(){return e(n,{color:"$success9"})}})}}),e(c,{id:"accessibility",children:"Accessibility"}),e(p,{spacing:"$2",mb:"$12",get children(){return[e(l,{get children(){return[e(r,{children:"CircularProgress"})," has a ",e(r,{children:"role"})," set to ",e(r,{children:"progressbar"})," to denote that it is a progress."]}}),e(l,{get children(){return[e(r,{children:"CircularProgress"})," has ",e(r,{children:"aria-valuenow"})," set to the percentage completion value passed to the component, to ensure the progress percent is visible to screen readers."]}})]}}),e(c,{id:"theming",children:"Theming"}),e(s,{mb:"$5",get children(){return[e(r,{children:"CircularProgress"})," base styles and default props can be overridden in the Hope UI theme configuration like below:"]}}),e(d,{lang:"js",get snippet(){return t.theming},mb:"$12"}),e(c,{id:"props",children:"Props"}),e(i,{id:"circular-progress-props",children:"CircularProgress props"}),e(h,{items:C,mb:"$10"}),e(i,{id:"circular-progress-indicator-props",children:"CircularProgressIndicator props"}),e(h,{items:P})]}})}export{M as default};
